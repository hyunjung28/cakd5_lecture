전역변수:  모든 지역에서 접근이 가능하다 
    들여쓰기 되지 않은 곳에서 생성된 것이 전역변수
다른 지역에서 접근하려면 global이 필요함
지역변수는 들여쓰기 됨 



name,address,phone = '','',''
kor,eng,math,tot,avg = 0,0,0,0,0
tch_name,sub = '',''




def info _ init(iname,iaddress,iphone):
    self를 매개변수로 지정합니다
    학생이란 변수에 student() 해당 클래스로부터 객체를 생성한다

__init__ 를 쓰면 클래스 쓸 때마다 객체를 불러온다고

객체는 데이터가 아니라 단순복사가 안된다
c=b
학생b=studnet




변수 = 20

a=20

리스트, 배열
a[0]=20
a[1]=25
a[2]=33
person('홍길동',22)
+함수까지




클래스 안에있는 함수형태는 매소드(코드)
클래스 내의 함수형태를 매소드라고 하잖아
매소드 형태를 초기자라고 해요
이건 초기화 하는 역할을 해요
이름과 나이를 초기화 할 수 있는 걸 알 수 있구요
self는 클래스 자기자신이고, self를 빼면 옆에있는 네임과 밖에 있는 네임이
헷갈릴 수 있는데 앞쪽의 나이는
클래스 소속의 나이고 옆에 나이는 매개변수를 통해 받은 나이입니다
홍길동, 나이 이렇게 전달할 수 있고
클래스형변수라고 하는데 우린 일반적으로 개체라고 해


p1이란 개체가 생겨나요 
한 번 객체를 정리하고 나면 다양한 개체를 만들어낼 ㅅ수 있어요

다양한 형태의 자료를 넣을 수 있다

p1=person('홍길동',22)
class person:
    def __init__(self,name,age):
        self.name=name
        self.age= age
        
    p1= person('홍길동',22)

class person:
    def __init__ (self,name,age):
        
        
        
p1=person()
p2=person()



for i in range(3):
    li.append(person())
    
    
    
    
    
    
class Person_

사용자정의형 자료라고 보면됩니다
list, dict 같은 매소드를 가져와 섯는데
self.name='홍길동'




Person()


class에 name과 age가 항상 들어가서 
jss 클래스를 만들고 a,b,c라는 변수에 각각 저장하면
그 안에 name,age를 넣을 수 있고,

통일된 자소서를 한덩어리에 묶어놓을 수 있다는 것


class JSS:
    def __init__(self): init 시작하다 클래스를 선언하는 순간 실행하는 함수
        클래스 실행함의 동시에 시작하다 명령을 줬다고 생각
    입력변수가 없다면 비워주는 게 맞는데 일단 self를 넣는다 생각하면 돼 
    print('JSS클래스 선언')
    
    a= JSS()
    
    JSS클래스 선언이 된 걸 볼 수 있음
    
    def show(slef):

init함수가 아닌건 변수에.붙여서 함수를 줘야 실행됨

init함수는 그냥 a=jss()만 해도 실행됨





반복적인 소스코드를 함수를 통해 줄일 수 있다

반복되는 불필요한 소스코드를 최소화하면서 현실세계에 사물을
컴퓨터에서 쉽게 표현할 수 있는 프로그래밍이라고 합니다


클래스 = 반복되는 불필요한 소스코드를 최소화하면서 현실세게의
사물을 컴퓨터 프로그래밍 상에서 쉽게 표현할 수 있도록 해주는 프로그래밍 기술



자동차 object가 존재한다고 하면 
자동차 형태를 class라 하고 클래스를 이용해 프로그래밍 상에서 인스턴스 형태로
생동감 불어주는 게 인스턴스화 
클래스로 오브젝트화 시키고 생돔감 불어넣어주는 게 인스턴스화

클래슬 정의된 객체를 프로그래밍 상에서 이용할 수 있게 만든 변수




#클래스의 멤버: 클래스 내부에 포함되는 변수
클래스 내에 함수가 존재합니다 내부에 포함되는 함수, 매소드라고 부릅니다


class Car:
    def __init__(self,name,color):
        self.name = name #클래스 멤버
        self.color = color # 클래스 멤버
        자동차라는 클래스가 있을 때 색상과 이름으로 속성을 정하겠다는 거고
        클래스안에 속하기때문에 ㅋ클래스 멤버 변수라 부릅니다
    
    #ㅡ클래스의 매소드
    def show_info(self):
        print("이름:~~")
        
car1 = Car("소나타","빨간색")
car1.show
car2 = Car
        
